<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (80 samples, 0.54%)</title><rect x="0.0000%" y="789" width="0.5437%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (75 samples, 0.51%)</title><rect x="0.0340%" y="773" width="0.5098%" height="15" fill="rgb(217,0,24)"/><text x="0.2840%" y="783.50"></text></g><g><title>[[stack]] (410 samples, 2.79%)</title><rect x="0.5437%" y="789" width="2.7867%" height="15" fill="rgb(221,193,54)"/><text x="0.7937%" y="799.50">[[..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (403 samples, 2.74%)</title><rect x="0.5913%" y="773" width="2.7391%" height="15" fill="rgb(248,212,6)"/><text x="0.8413%" y="783.50">ha..</text></g><g><title>advent_of_code::day11::Area::get_occ_cardinal_seats (16 samples, 0.11%)</title><rect x="3.5003%" y="773" width="0.1087%" height="15" fill="rgb(208,68,35)"/><text x="3.7503%" y="783.50"></text></g><g><title>advent_of_code::day15::play_until (104 samples, 0.71%)</title><rect x="3.6158%" y="773" width="0.7069%" height="15" fill="rgb(232,128,0)"/><text x="3.8658%" y="783.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (529 samples, 3.60%)</title><rect x="4.3227%" y="773" width="3.5955%" height="15" fill="rgb(207,160,47)"/><text x="4.5727%" y="783.50">half..</text></g><g><title>[unknown] (815 samples, 5.54%)</title><rect x="3.3508%" y="789" width="5.5393%" height="15" fill="rgb(228,23,34)"/><text x="3.6008%" y="799.50">[unknow..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (143 samples, 0.97%)</title><rect x="7.9182%" y="773" width="0.9719%" height="15" fill="rgb(218,30,26)"/><text x="8.1682%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.14%)</title><rect x="9.3183%" y="69" width="0.1427%" height="15" fill="rgb(220,122,19)"/><text x="9.5683%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.51%)</title><rect x="9.2163%" y="181" width="0.5098%" height="15" fill="rgb(250,228,42)"/><text x="9.4663%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (75 samples, 0.51%)</title><rect x="9.2163%" y="165" width="0.5098%" height="15" fill="rgb(240,193,28)"/><text x="9.4663%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (75 samples, 0.51%)</title><rect x="9.2163%" y="149" width="0.5098%" height="15" fill="rgb(216,20,37)"/><text x="9.4663%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (75 samples, 0.51%)</title><rect x="9.2163%" y="133" width="0.5098%" height="15" fill="rgb(206,188,39)"/><text x="9.4663%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (73 samples, 0.50%)</title><rect x="9.2299%" y="117" width="0.4962%" height="15" fill="rgb(217,207,13)"/><text x="9.4799%" y="127.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (68 samples, 0.46%)</title><rect x="9.2639%" y="101" width="0.4622%" height="15" fill="rgb(231,73,38)"/><text x="9.5139%" y="111.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_cardinal_seats::{{closure}} (60 samples, 0.41%)</title><rect x="9.3183%" y="85" width="0.4078%" height="15" fill="rgb(225,20,46)"/><text x="9.5683%" y="95.50"></text></g><g><title>advent_of_code::day11::Area::get_seat_in_direction (39 samples, 0.27%)</title><rect x="9.4610%" y="69" width="0.2651%" height="15" fill="rgb(210,31,41)"/><text x="9.7110%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.11%)</title><rect x="9.7397%" y="117" width="0.1087%" height="15" fill="rgb(221,200,47)"/><text x="9.9897%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (15 samples, 0.10%)</title><rect x="9.7465%" y="101" width="0.1020%" height="15" fill="rgb(226,26,5)"/><text x="9.9965%" y="111.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.10%)</title><rect x="9.7465%" y="85" width="0.1020%" height="15" fill="rgb(249,33,26)"/><text x="9.9965%" y="95.50"></text></g><g><title>__rdl_realloc (15 samples, 0.10%)</title><rect x="9.7465%" y="69" width="0.1020%" height="15" fill="rgb(235,183,28)"/><text x="9.9965%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (15 samples, 0.10%)</title><rect x="9.7465%" y="53" width="0.1020%" height="15" fill="rgb(221,5,38)"/><text x="9.9965%" y="63.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.10%)</title><rect x="9.7465%" y="37" width="0.1020%" height="15" fill="rgb(247,18,42)"/><text x="9.9965%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (19 samples, 0.13%)</title><rect x="9.7261%" y="181" width="0.1291%" height="15" fill="rgb(241,131,45)"/><text x="9.9761%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.13%)</title><rect x="9.7261%" y="165" width="0.1291%" height="15" fill="rgb(249,31,29)"/><text x="9.9761%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (19 samples, 0.13%)</title><rect x="9.7261%" y="149" width="0.1291%" height="15" fill="rgb(225,111,53)"/><text x="9.9761%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.13%)</title><rect x="9.7261%" y="133" width="0.1291%" height="15" fill="rgb(238,160,17)"/><text x="9.9761%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (106 samples, 0.72%)</title><rect x="9.1552%" y="213" width="0.7205%" height="15" fill="rgb(214,148,48)"/><text x="9.4052%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (100 samples, 0.68%)</title><rect x="9.1959%" y="197" width="0.6797%" height="15" fill="rgb(232,36,49)"/><text x="9.4459%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.12%)</title><rect x="9.8756%" y="213" width="0.1155%" height="15" fill="rgb(209,103,24)"/><text x="10.1256%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (17 samples, 0.12%)</title><rect x="9.8756%" y="197" width="0.1155%" height="15" fill="rgb(229,88,8)"/><text x="10.1256%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 0.12%)</title><rect x="9.8756%" y="181" width="0.1155%" height="15" fill="rgb(213,181,19)"/><text x="10.1256%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 0.12%)</title><rect x="9.8756%" y="165" width="0.1155%" height="15" fill="rgb(254,191,54)"/><text x="10.1256%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.12%)</title><rect x="9.8756%" y="149" width="0.1155%" height="15" fill="rgb(241,83,37)"/><text x="10.1256%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (130 samples, 0.88%)</title><rect x="9.1416%" y="325" width="0.8836%" height="15" fill="rgb(233,36,39)"/><text x="9.3916%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (130 samples, 0.88%)</title><rect x="9.1416%" y="309" width="0.8836%" height="15" fill="rgb(226,3,54)"/><text x="9.3916%" y="319.50"></text></g><g><title>core::iter::adapters::process_results (130 samples, 0.88%)</title><rect x="9.1416%" y="293" width="0.8836%" height="15" fill="rgb(245,192,40)"/><text x="9.3916%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (130 samples, 0.88%)</title><rect x="9.1416%" y="277" width="0.8836%" height="15" fill="rgb(238,167,29)"/><text x="9.3916%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (130 samples, 0.88%)</title><rect x="9.1416%" y="261" width="0.8836%" height="15" fill="rgb(232,182,51)"/><text x="9.3916%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (130 samples, 0.88%)</title><rect x="9.1416%" y="245" width="0.8836%" height="15" fill="rgb(231,60,39)"/><text x="9.3916%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (128 samples, 0.87%)</title><rect x="9.1552%" y="229" width="0.8700%" height="15" fill="rgb(208,69,12)"/><text x="9.4052%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (18 samples, 0.12%)</title><rect x="10.1543%" y="229" width="0.1223%" height="15" fill="rgb(235,93,37)"/><text x="10.4043%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.12%)</title><rect x="10.1543%" y="213" width="0.1223%" height="15" fill="rgb(213,116,39)"/><text x="10.4043%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (18 samples, 0.12%)</title><rect x="10.1543%" y="197" width="0.1223%" height="15" fill="rgb(222,207,29)"/><text x="10.4043%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (18 samples, 0.12%)</title><rect x="10.1543%" y="181" width="0.1223%" height="15" fill="rgb(206,96,30)"/><text x="10.4043%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (44 samples, 0.30%)</title><rect x="10.0387%" y="261" width="0.2991%" height="15" fill="rgb(218,138,4)"/><text x="10.2887%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (39 samples, 0.27%)</title><rect x="10.0727%" y="245" width="0.2651%" height="15" fill="rgb(250,191,14)"/><text x="10.3227%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (65 samples, 0.44%)</title><rect x="10.0251%" y="277" width="0.4418%" height="15" fill="rgb(239,60,40)"/><text x="10.2751%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (218 samples, 1.48%)</title><rect x="9.0056%" y="405" width="1.4817%" height="15" fill="rgb(206,27,48)"/><text x="9.2556%" y="415.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (216 samples, 1.47%)</title><rect x="9.0192%" y="389" width="1.4681%" height="15" fill="rgb(225,35,8)"/><text x="9.2692%" y="399.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (216 samples, 1.47%)</title><rect x="9.0192%" y="373" width="1.4681%" height="15" fill="rgb(250,213,24)"/><text x="9.2692%" y="383.50"></text></g><g><title>advent_of_code::day11::Area::step2::{{closure}} (208 samples, 1.41%)</title><rect x="9.0736%" y="357" width="1.4137%" height="15" fill="rgb(247,123,22)"/><text x="9.3236%" y="367.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_cardinal_seats (207 samples, 1.41%)</title><rect x="9.0804%" y="341" width="1.4069%" height="15" fill="rgb(231,138,38)"/><text x="9.3304%" y="351.50"></text></g><g><title>itertools::Itertools::collect_vec (68 samples, 0.46%)</title><rect x="10.0251%" y="325" width="0.4622%" height="15" fill="rgb(231,145,46)"/><text x="10.2751%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (68 samples, 0.46%)</title><rect x="10.0251%" y="309" width="0.4622%" height="15" fill="rgb(251,118,11)"/><text x="10.2751%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (68 samples, 0.46%)</title><rect x="10.0251%" y="293" width="0.4622%" height="15" fill="rgb(217,147,25)"/><text x="10.2751%" y="303.50"></text></g><g><title>&lt;advent_of_code::day11::day11_part2::RunnerStruct as aoc_runner::Runner&gt;::try_run (224 samples, 1.52%)</title><rect x="8.9920%" y="709" width="1.5225%" height="15" fill="rgb(247,81,37)"/><text x="9.2420%" y="719.50"></text></g><g><title>advent_of_code::day11::part2 (224 samples, 1.52%)</title><rect x="8.9920%" y="693" width="1.5225%" height="15" fill="rgb(209,12,38)"/><text x="9.2420%" y="703.50"></text></g><g><title>advent_of_code::day11::Area::step2 (223 samples, 1.52%)</title><rect x="8.9988%" y="677" width="1.5157%" height="15" fill="rgb(227,1,9)"/><text x="9.2488%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (223 samples, 1.52%)</title><rect x="8.9988%" y="661" width="1.5157%" height="15" fill="rgb(248,47,43)"/><text x="9.2488%" y="671.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (223 samples, 1.52%)</title><rect x="8.9988%" y="645" width="1.5157%" height="15" fill="rgb(221,10,30)"/><text x="9.2488%" y="655.50"></text></g><g><title>core::iter::adapters::process_results (223 samples, 1.52%)</title><rect x="8.9988%" y="629" width="1.5157%" height="15" fill="rgb(210,229,1)"/><text x="9.2488%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (223 samples, 1.52%)</title><rect x="8.9988%" y="613" width="1.5157%" height="15" fill="rgb(222,148,37)"/><text x="9.2488%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (223 samples, 1.52%)</title><rect x="8.9988%" y="597" width="1.5157%" height="15" fill="rgb(234,67,33)"/><text x="9.2488%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (223 samples, 1.52%)</title><rect x="8.9988%" y="581" width="1.5157%" height="15" fill="rgb(247,98,35)"/><text x="9.2488%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (223 samples, 1.52%)</title><rect x="8.9988%" y="565" width="1.5157%" height="15" fill="rgb(247,138,52)"/><text x="9.2488%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (223 samples, 1.52%)</title><rect x="8.9988%" y="549" width="1.5157%" height="15" fill="rgb(213,79,30)"/><text x="9.2488%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (222 samples, 1.51%)</title><rect x="9.0056%" y="533" width="1.5089%" height="15" fill="rgb(246,177,23)"/><text x="9.2556%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 1.51%)</title><rect x="9.0056%" y="517" width="1.5089%" height="15" fill="rgb(230,62,27)"/><text x="9.2556%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (222 samples, 1.51%)</title><rect x="9.0056%" y="501" width="1.5089%" height="15" fill="rgb(216,154,8)"/><text x="9.2556%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (222 samples, 1.51%)</title><rect x="9.0056%" y="485" width="1.5089%" height="15" fill="rgb(244,35,45)"/><text x="9.2556%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (222 samples, 1.51%)</title><rect x="9.0056%" y="469" width="1.5089%" height="15" fill="rgb(251,115,12)"/><text x="9.2556%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (222 samples, 1.51%)</title><rect x="9.0056%" y="453" width="1.5089%" height="15" fill="rgb(240,54,50)"/><text x="9.2556%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (222 samples, 1.51%)</title><rect x="9.0056%" y="437" width="1.5089%" height="15" fill="rgb(233,84,52)"/><text x="9.2556%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (222 samples, 1.51%)</title><rect x="9.0056%" y="421" width="1.5089%" height="15" fill="rgb(207,117,47)"/><text x="9.2556%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (21 samples, 0.14%)</title><rect x="10.6776%" y="405" width="0.1427%" height="15" fill="rgb(249,43,39)"/><text x="10.9276%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (21 samples, 0.14%)</title><rect x="10.6776%" y="389" width="0.1427%" height="15" fill="rgb(209,38,44)"/><text x="10.9276%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (21 samples, 0.14%)</title><rect x="10.6776%" y="373" width="0.1427%" height="15" fill="rgb(236,212,23)"/><text x="10.9276%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.14%)</title><rect x="10.6776%" y="357" width="0.1427%" height="15" fill="rgb(242,79,21)"/><text x="10.9276%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.14%)</title><rect x="10.6776%" y="341" width="0.1427%" height="15" fill="rgb(211,96,35)"/><text x="10.9276%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (24 samples, 0.16%)</title><rect x="10.9019%" y="293" width="0.1631%" height="15" fill="rgb(253,215,40)"/><text x="11.1519%" y="303.50"></text></g><g><title>alloc::alloc::realloc (24 samples, 0.16%)</title><rect x="10.9019%" y="277" width="0.1631%" height="15" fill="rgb(211,81,21)"/><text x="11.1519%" y="287.50"></text></g><g><title>__rdl_realloc (24 samples, 0.16%)</title><rect x="10.9019%" y="261" width="0.1631%" height="15" fill="rgb(208,190,38)"/><text x="11.1519%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (23 samples, 0.16%)</title><rect x="10.9087%" y="245" width="0.1563%" height="15" fill="rgb(235,213,38)"/><text x="11.1587%" y="255.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.16%)</title><rect x="10.9087%" y="229" width="0.1563%" height="15" fill="rgb(237,122,38)"/><text x="11.1587%" y="239.50"></text></g><g><title>_int_realloc (18 samples, 0.12%)</title><rect x="10.9427%" y="213" width="0.1223%" height="15" fill="rgb(244,218,35)"/><text x="11.1927%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.17%)</title><rect x="10.9019%" y="309" width="0.1699%" height="15" fill="rgb(240,68,47)"/><text x="11.1519%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (28 samples, 0.19%)</title><rect x="10.8951%" y="373" width="0.1903%" height="15" fill="rgb(210,16,53)"/><text x="11.1451%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.19%)</title><rect x="10.8951%" y="357" width="0.1903%" height="15" fill="rgb(235,124,12)"/><text x="11.1451%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (28 samples, 0.19%)</title><rect x="10.8951%" y="341" width="0.1903%" height="15" fill="rgb(224,169,11)"/><text x="11.1451%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.18%)</title><rect x="10.9019%" y="325" width="0.1835%" height="15" fill="rgb(250,166,2)"/><text x="11.1519%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (30 samples, 0.20%)</title><rect x="10.8883%" y="389" width="0.2039%" height="15" fill="rgb(242,216,29)"/><text x="11.1383%" y="399.50"></text></g><g><title>advent_of_code::day11::Area::get_neighbors (59 samples, 0.40%)</title><rect x="10.8204%" y="405" width="0.4010%" height="15" fill="rgb(230,116,27)"/><text x="11.0704%" y="415.50"></text></g><g><title>advent_of_code::day11::Area::step::{{closure}} (84 samples, 0.57%)</title><rect x="10.6776%" y="437" width="0.5709%" height="15" fill="rgb(228,99,48)"/><text x="10.9276%" y="447.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_neighbors (84 samples, 0.57%)</title><rect x="10.6776%" y="421" width="0.5709%" height="15" fill="rgb(253,11,6)"/><text x="10.9276%" y="431.50"></text></g><g><title>&lt;advent_of_code::day11::day11_part1::RunnerStruct as aoc_runner::Runner&gt;::run (103 samples, 0.70%)</title><rect x="10.5553%" y="693" width="0.7001%" height="15" fill="rgb(247,143,39)"/><text x="10.8053%" y="703.50"></text></g><g><title>advent_of_code::day11::part1 (103 samples, 0.70%)</title><rect x="10.5553%" y="677" width="0.7001%" height="15" fill="rgb(236,97,10)"/><text x="10.8053%" y="687.50"></text></g><g><title>advent_of_code::day11::Area::step (102 samples, 0.69%)</title><rect x="10.5621%" y="661" width="0.6933%" height="15" fill="rgb(233,208,19)"/><text x="10.8121%" y="671.50"></text></g><g><title>itertools::Itertools::collect_vec (102 samples, 0.69%)</title><rect x="10.5621%" y="645" width="0.6933%" height="15" fill="rgb(216,164,2)"/><text x="10.8121%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (102 samples, 0.69%)</title><rect x="10.5621%" y="629" width="0.6933%" height="15" fill="rgb(220,129,5)"/><text x="10.8121%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (102 samples, 0.69%)</title><rect x="10.5621%" y="613" width="0.6933%" height="15" fill="rgb(242,17,10)"/><text x="10.8121%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (102 samples, 0.69%)</title><rect x="10.5621%" y="597" width="0.6933%" height="15" fill="rgb(242,107,0)"/><text x="10.8121%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (102 samples, 0.69%)</title><rect x="10.5621%" y="581" width="0.6933%" height="15" fill="rgb(251,28,31)"/><text x="10.8121%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (102 samples, 0.69%)</title><rect x="10.5621%" y="565" width="0.6933%" height="15" fill="rgb(233,223,10)"/><text x="10.8121%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102 samples, 0.69%)</title><rect x="10.5621%" y="549" width="0.6933%" height="15" fill="rgb(215,21,27)"/><text x="10.8121%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102 samples, 0.69%)</title><rect x="10.5621%" y="533" width="0.6933%" height="15" fill="rgb(232,23,21)"/><text x="10.8121%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102 samples, 0.69%)</title><rect x="10.5621%" y="517" width="0.6933%" height="15" fill="rgb(244,5,23)"/><text x="10.8121%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (98 samples, 0.67%)</title><rect x="10.5893%" y="501" width="0.6661%" height="15" fill="rgb(226,81,46)"/><text x="10.8393%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (98 samples, 0.67%)</title><rect x="10.5893%" y="485" width="0.6661%" height="15" fill="rgb(247,70,30)"/><text x="10.8393%" y="495.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (98 samples, 0.67%)</title><rect x="10.5893%" y="469" width="0.6661%" height="15" fill="rgb(212,68,19)"/><text x="10.8393%" y="479.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (97 samples, 0.66%)</title><rect x="10.5961%" y="453" width="0.6593%" height="15" fill="rgb(240,187,13)"/><text x="10.8461%" y="463.50"></text></g><g><title>advent_of_code::day15::play_until (55 samples, 0.37%)</title><rect x="14.4294%" y="597" width="0.3738%" height="15" fill="rgb(223,113,26)"/><text x="14.6794%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (106 samples, 0.72%)</title><rect x="14.8032%" y="597" width="0.7205%" height="15" fill="rgb(206,192,2)"/><text x="15.0532%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (106 samples, 0.72%)</title><rect x="14.8032%" y="581" width="0.7205%" height="15" fill="rgb(241,108,4)"/><text x="15.0532%" y="591.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (106 samples, 0.72%)</title><rect x="14.8032%" y="565" width="0.7205%" height="15" fill="rgb(247,173,49)"/><text x="15.0532%" y="575.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (106 samples, 0.72%)</title><rect x="14.8032%" y="549" width="0.7205%" height="15" fill="rgb(224,114,35)"/><text x="15.0532%" y="559.50"></text></g><g><title>&lt;u64 as ahash::folded_multiply::FoldedMultiply&gt;::folded_multiply (104 samples, 0.71%)</title><rect x="14.8168%" y="533" width="0.7069%" height="15" fill="rgb(245,159,27)"/><text x="15.0668%" y="543.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (104 samples, 0.71%)</title><rect x="14.8168%" y="517" width="0.7069%" height="15" fill="rgb(245,172,44)"/><text x="15.0668%" y="527.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (178 samples, 1.21%)</title><rect x="16.3733%" y="565" width="1.2098%" height="15" fill="rgb(236,23,11)"/><text x="16.6233%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (101 samples, 0.69%)</title><rect x="16.8966%" y="549" width="0.6865%" height="15" fill="rgb(205,117,38)"/><text x="17.1466%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (101 samples, 0.69%)</title><rect x="16.8966%" y="533" width="0.6865%" height="15" fill="rgb(237,72,25)"/><text x="17.1466%" y="543.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (67 samples, 0.46%)</title><rect x="17.1277%" y="517" width="0.4554%" height="15" fill="rgb(244,70,9)"/><text x="17.3777%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (224 samples, 1.52%)</title><rect x="16.3733%" y="581" width="1.5225%" height="15" fill="rgb(217,125,39)"/><text x="16.6233%" y="591.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (46 samples, 0.31%)</title><rect x="17.5831%" y="565" width="0.3126%" height="15" fill="rgb(235,36,10)"/><text x="17.8331%" y="575.50"></text></g><g><title>advent_of_code::day15::play_until (78 samples, 0.53%)</title><rect x="17.8957%" y="581" width="0.5301%" height="15" fill="rgb(251,123,47)"/><text x="18.1457%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (5,164 samples, 35.10%)</title><rect x="18.4259%" y="581" width="35.0982%" height="15" fill="rgb(221,13,13)"/><text x="18.6759%" y="591.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}}</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (5,164 samples, 35.10%)</title><rect x="18.4259%" y="565" width="35.0982%" height="15" fill="rgb(238,131,9)"/><text x="18.6759%" y="575.50">core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq</text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (16 samples, 0.11%)</title><rect x="53.5445%" y="581" width="0.1087%" height="15" fill="rgb(211,50,8)"/><text x="53.7945%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3,300 samples, 22.43%)</title><rect x="53.6532%" y="581" width="22.4291%" height="15" fill="rgb(245,182,24)"/><text x="53.9032%" y="591.50">hashbrown::raw::sse2::Group::load</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,300 samples, 22.43%)</title><rect x="53.6532%" y="565" width="22.4291%" height="15" fill="rgb(242,14,37)"/><text x="53.9032%" y="575.50">core::core_arch::x86::sse2::_mm_load..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,300 samples, 22.43%)</title><rect x="53.6532%" y="549" width="22.4291%" height="15" fill="rgb(246,228,12)"/><text x="53.9032%" y="559.50">core::intrinsics::copy_nonoverlapping</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (119 samples, 0.81%)</title><rect x="76.0824%" y="565" width="0.8088%" height="15" fill="rgb(213,55,15)"/><text x="76.3324%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (162 samples, 1.10%)</title><rect x="76.0824%" y="581" width="1.1011%" height="15" fill="rgb(209,9,3)"/><text x="76.3324%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (43 samples, 0.29%)</title><rect x="76.8912%" y="565" width="0.2923%" height="15" fill="rgb(230,59,30)"/><text x="77.1412%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (43 samples, 0.29%)</title><rect x="76.8912%" y="549" width="0.2923%" height="15" fill="rgb(209,121,21)"/><text x="77.1412%" y="559.50"></text></g><g><title>advent_of_code::day15::play_until (43 samples, 0.29%)</title><rect x="76.8912%" y="533" width="0.2923%" height="15" fill="rgb(220,109,13)"/><text x="77.1412%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (9,466 samples, 64.34%)</title><rect x="13.5662%" y="645" width="64.3377%" height="15" fill="rgb(232,18,1)"/><text x="13.8162%" y="655.50">halfbrown::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (9,339 samples, 63.47%)</title><rect x="14.4294%" y="629" width="63.4745%" height="15" fill="rgb(215,41,42)"/><text x="14.6794%" y="639.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (9,339 samples, 63.47%)</title><rect x="14.4294%" y="613" width="63.4745%" height="15" fill="rgb(224,123,36)"/><text x="14.6794%" y="623.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (9,178 samples, 62.38%)</title><rect x="15.5237%" y="597" width="62.3802%" height="15" fill="rgb(240,125,3)"/><text x="15.7737%" y="607.50">hashbrown::raw::RawTable&lt;T&gt;::find</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (106 samples, 0.72%)</title><rect x="77.1834%" y="581" width="0.7205%" height="15" fill="rgb(205,98,50)"/><text x="77.4334%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (106 samples, 0.72%)</title><rect x="77.1834%" y="565" width="0.7205%" height="15" fill="rgb(205,185,37)"/><text x="77.4334%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (106 samples, 0.72%)</title><rect x="77.1834%" y="549" width="0.7205%" height="15" fill="rgb(238,207,15)"/><text x="77.4334%" y="559.50"></text></g><g><title>core::mem::replace (91 samples, 0.62%)</title><rect x="79.9225%" y="613" width="0.6185%" height="15" fill="rgb(213,199,42)"/><text x="80.1725%" y="623.50"></text></g><g><title>core::mem::swap (91 samples, 0.62%)</title><rect x="79.9225%" y="597" width="0.6185%" height="15" fill="rgb(235,201,11)"/><text x="80.1725%" y="607.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (91 samples, 0.62%)</title><rect x="79.9225%" y="581" width="0.6185%" height="15" fill="rgb(207,46,11)"/><text x="80.1725%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (91 samples, 0.62%)</title><rect x="79.9225%" y="565" width="0.6185%" height="15" fill="rgb(241,35,35)"/><text x="80.1725%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (385 samples, 2.62%)</title><rect x="80.5410%" y="613" width="2.6167%" height="15" fill="rgb(243,32,47)"/><text x="80.7910%" y="623.50">ha..</text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (81 samples, 0.55%)</title><rect x="83.6335%" y="533" width="0.5505%" height="15" fill="rgb(247,202,23)"/><text x="83.8835%" y="543.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (171 samples, 1.16%)</title><rect x="83.1578%" y="565" width="1.1622%" height="15" fill="rgb(219,102,11)"/><text x="83.4078%" y="575.50"></text></g><g><title>&lt;u64 as ahash::folded_multiply::FoldedMultiply&gt;::folded_multiply (101 samples, 0.69%)</title><rect x="83.6335%" y="549" width="0.6865%" height="15" fill="rgb(243,110,44)"/><text x="83.8835%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (20 samples, 0.14%)</title><rect x="84.1841%" y="533" width="0.1359%" height="15" fill="rgb(222,74,54)"/><text x="84.4341%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (216 samples, 1.47%)</title><rect x="83.1578%" y="613" width="1.4681%" height="15" fill="rgb(216,99,12)"/><text x="83.4078%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (216 samples, 1.47%)</title><rect x="83.1578%" y="597" width="1.4681%" height="15" fill="rgb(226,22,26)"/><text x="83.4078%" y="607.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (216 samples, 1.47%)</title><rect x="83.1578%" y="581" width="1.4681%" height="15" fill="rgb(217,163,10)"/><text x="83.4078%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (45 samples, 0.31%)</title><rect x="84.3200%" y="565" width="0.3059%" height="15" fill="rgb(213,25,53)"/><text x="84.5700%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.24%)</title><rect x="84.8161%" y="597" width="0.2379%" height="15" fill="rgb(252,105,26)"/><text x="85.0661%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (193 samples, 1.31%)</title><rect x="85.0540%" y="581" width="1.3118%" height="15" fill="rgb(220,39,43)"/><text x="85.3040%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (371 samples, 2.52%)</title><rect x="85.0540%" y="597" width="2.5216%" height="15" fill="rgb(229,68,48)"/><text x="85.3040%" y="607.50">&lt;h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (178 samples, 1.21%)</title><rect x="86.3658%" y="581" width="1.2098%" height="15" fill="rgb(252,8,32)"/><text x="86.6158%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (30 samples, 0.20%)</title><rect x="87.5756%" y="597" width="0.2039%" height="15" fill="rgb(223,20,43)"/><text x="87.8256%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (141 samples, 0.96%)</title><rect x="87.7795%" y="597" width="0.9583%" height="15" fill="rgb(229,81,49)"/><text x="88.0295%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (141 samples, 0.96%)</title><rect x="87.7795%" y="581" width="0.9583%" height="15" fill="rgb(236,28,36)"/><text x="88.0295%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (228 samples, 1.55%)</title><rect x="88.7379%" y="597" width="1.5496%" height="15" fill="rgb(249,185,26)"/><text x="88.9879%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (21 samples, 0.14%)</title><rect x="90.2875%" y="597" width="0.1427%" height="15" fill="rgb(249,174,33)"/><text x="90.5375%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (179 samples, 1.22%)</title><rect x="90.4302%" y="597" width="1.2166%" height="15" fill="rgb(233,201,37)"/><text x="90.6802%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (179 samples, 1.22%)</title><rect x="90.4302%" y="581" width="1.2166%" height="15" fill="rgb(221,78,26)"/><text x="90.6802%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (179 samples, 1.22%)</title><rect x="90.4302%" y="565" width="1.2166%" height="15" fill="rgb(250,127,30)"/><text x="90.6802%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.18%)</title><rect x="91.6468%" y="581" width="0.1767%" height="15" fill="rgb(230,49,44)"/><text x="91.8968%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (268 samples, 1.82%)</title><rect x="91.6468%" y="597" width="1.8215%" height="15" fill="rgb(229,67,23)"/><text x="91.8968%" y="607.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (242 samples, 1.64%)</title><rect x="91.8236%" y="581" width="1.6448%" height="15" fill="rgb(249,83,47)"/><text x="92.0736%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (242 samples, 1.64%)</title><rect x="91.8236%" y="565" width="1.6448%" height="15" fill="rgb(215,43,3)"/><text x="92.0736%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (242 samples, 1.64%)</title><rect x="91.8236%" y="549" width="1.6448%" height="15" fill="rgb(238,154,13)"/><text x="92.0736%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1,302 samples, 8.85%)</title><rect x="84.6258%" y="613" width="8.8493%" height="15" fill="rgb(219,56,2)"/><text x="84.8758%" y="623.50">hashbrown::r..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (24 samples, 0.16%)</title><rect x="93.6994%" y="597" width="0.1631%" height="15" fill="rgb(233,0,4)"/><text x="93.9494%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (24 samples, 0.16%)</title><rect x="93.8626%" y="597" width="0.1631%" height="15" fill="rgb(235,30,7)"/><text x="94.1126%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (24 samples, 0.16%)</title><rect x="93.8626%" y="581" width="0.1631%" height="15" fill="rgb(250,79,13)"/><text x="94.1126%" y="591.50"></text></g><g><title>core::ptr::write (24 samples, 0.16%)</title><rect x="93.8626%" y="565" width="0.1631%" height="15" fill="rgb(211,146,34)"/><text x="94.1126%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (25 samples, 0.17%)</title><rect x="94.1888%" y="581" width="0.1699%" height="15" fill="rgb(228,22,38)"/><text x="94.4388%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (73 samples, 0.50%)</title><rect x="94.0257%" y="597" width="0.4962%" height="15" fill="rgb(235,168,5)"/><text x="94.2757%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (17 samples, 0.12%)</title><rect x="94.4063%" y="581" width="0.1155%" height="15" fill="rgb(221,155,16)"/><text x="94.6563%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.12%)</title><rect x="94.4063%" y="565" width="0.1155%" height="15" fill="rgb(215,215,53)"/><text x="94.6563%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.16%)</title><rect x="94.5762%" y="549" width="0.1563%" height="15" fill="rgb(223,4,10)"/><text x="94.8262%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.16%)</title><rect x="94.5762%" y="533" width="0.1563%" height="15" fill="rgb(234,103,6)"/><text x="94.8262%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (15 samples, 0.10%)</title><rect x="94.7325%" y="549" width="0.1020%" height="15" fill="rgb(227,97,0)"/><text x="94.9825%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.10%)</title><rect x="94.7325%" y="533" width="0.1020%" height="15" fill="rgb(234,150,53)"/><text x="94.9825%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (15 samples, 0.10%)</title><rect x="94.7325%" y="517" width="0.1020%" height="15" fill="rgb(228,201,54)"/><text x="94.9825%" y="527.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (15 samples, 0.10%)</title><rect x="94.7325%" y="501" width="0.1020%" height="15" fill="rgb(222,22,37)"/><text x="94.9825%" y="511.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (15 samples, 0.10%)</title><rect x="94.7325%" y="485" width="0.1020%" height="15" fill="rgb(237,53,32)"/><text x="94.9825%" y="495.50"></text></g><g><title>&lt;u64 as ahash::folded_multiply::FoldedMultiply&gt;::folded_multiply (15 samples, 0.10%)</title><rect x="94.7325%" y="469" width="0.1020%" height="15" fill="rgb(233,25,53)"/><text x="94.9825%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (121 samples, 0.82%)</title><rect x="94.8345%" y="549" width="0.8224%" height="15" fill="rgb(210,40,34)"/><text x="95.0845%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (121 samples, 0.82%)</title><rect x="94.8345%" y="533" width="0.8224%" height="15" fill="rgb(241,220,44)"/><text x="95.0845%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (121 samples, 0.82%)</title><rect x="94.8345%" y="517" width="0.8224%" height="15" fill="rgb(235,28,35)"/><text x="95.0845%" y="527.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15 samples, 0.10%)</title><rect x="95.7724%" y="533" width="0.1020%" height="15" fill="rgb(210,56,17)"/><text x="96.0224%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (45 samples, 0.31%)</title><rect x="95.6569%" y="549" width="0.3059%" height="15" fill="rgb(224,130,29)"/><text x="95.9069%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::set_ctrl (15 samples, 0.10%)</title><rect x="96.0579%" y="549" width="0.1020%" height="15" fill="rgb(235,212,8)"/><text x="96.3079%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (27 samples, 0.18%)</title><rect x="96.1599%" y="533" width="0.1835%" height="15" fill="rgb(223,33,50)"/><text x="96.4099%" y="543.50"></text></g><g><title>core::intrinsics::write_bytes (27 samples, 0.18%)</title><rect x="96.1599%" y="517" width="0.1835%" height="15" fill="rgb(219,149,13)"/><text x="96.4099%" y="527.50"></text></g><g><title>__memset_erms (27 samples, 0.18%)</title><rect x="96.1599%" y="501" width="0.1835%" height="15" fill="rgb(250,156,29)"/><text x="96.4099%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (269 samples, 1.83%)</title><rect x="94.5219%" y="597" width="1.8283%" height="15" fill="rgb(216,193,19)"/><text x="94.7719%" y="607.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (268 samples, 1.82%)</title><rect x="94.5286%" y="581" width="1.8215%" height="15" fill="rgb(216,135,14)"/><text x="94.7786%" y="591.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (264 samples, 1.79%)</title><rect x="94.5558%" y="565" width="1.7943%" height="15" fill="rgb(241,47,5)"/><text x="94.8058%" y="575.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (28 samples, 0.19%)</title><rect x="96.1599%" y="549" width="0.1903%" height="15" fill="rgb(233,42,35)"/><text x="96.4099%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::set_ctrl (16 samples, 0.11%)</title><rect x="96.3502%" y="597" width="0.1087%" height="15" fill="rgb(231,13,6)"/><text x="96.6002%" y="607.50"></text></g><g><title>&lt;advent_of_code::day15::day15_part2_default::RunnerStruct as aoc_runner::Runner&gt;::run (12,541 samples, 85.24%)</title><rect x="11.2621%" y="693" width="85.2375%" height="15" fill="rgb(207,181,40)"/><text x="11.5121%" y="703.50">&lt;advent_of_code::day15::day15_part2_default::RunnerStruct as aoc_runner::Runner&gt;::run</text></g><g><title>advent_of_code::day15::part2 (12,541 samples, 85.24%)</title><rect x="11.2621%" y="677" width="85.2375%" height="15" fill="rgb(254,173,49)"/><text x="11.5121%" y="687.50">advent_of_code::day15::part2</text></g><g><title>advent_of_code::day15::play_until (12,541 samples, 85.24%)</title><rect x="11.2621%" y="661" width="85.2375%" height="15" fill="rgb(221,1,38)"/><text x="11.5121%" y="671.50">advent_of_code::day15::play_until</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,736 samples, 18.60%)</title><rect x="77.9039%" y="645" width="18.5958%" height="15" fill="rgb(206,124,46)"/><text x="78.1539%" y="655.50">halfbrown::HashMap&lt;K,V,S&gt;::in..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2,481 samples, 16.86%)</title><rect x="79.6371%" y="629" width="16.8626%" height="15" fill="rgb(249,21,11)"/><text x="79.8871%" y="639.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (445 samples, 3.02%)</title><rect x="93.4752%" y="613" width="3.0245%" height="15" fill="rgb(222,201,40)"/><text x="93.7252%" y="623.50">has..</text></g><g><title>advent_of_code::day25::transform (283 samples, 1.92%)</title><rect x="96.5065%" y="661" width="1.9235%" height="15" fill="rgb(235,61,29)"/><text x="96.7565%" y="671.50">a..</text></g><g><title>aoc_runner::Runner::try_run (13,139 samples, 89.30%)</title><rect x="10.5553%" y="709" width="89.3020%" height="15" fill="rgb(219,207,3)"/><text x="10.8053%" y="719.50">aoc_runner::Runner::try_run</text></g><g><title>&lt;advent_of_code::day25::day25_part1::RunnerStruct as aoc_runner::Runner&gt;::run (494 samples, 3.36%)</title><rect x="96.4997%" y="693" width="3.3576%" height="15" fill="rgb(222,56,46)"/><text x="96.7497%" y="703.50">&lt;ad..</text></g><g><title>advent_of_code::day25::part1 (494 samples, 3.36%)</title><rect x="96.4997%" y="677" width="3.3576%" height="15" fill="rgb(239,76,54)"/><text x="96.7497%" y="687.50">adv..</text></g><g><title>advent_of_code::day25::transform_until (210 samples, 1.43%)</title><rect x="98.4300%" y="661" width="1.4273%" height="15" fill="rgb(231,124,27)"/><text x="98.6800%" y="671.50"></text></g><g><title>__libc_start_main (13,373 samples, 90.89%)</title><rect x="8.9717%" y="773" width="90.8924%" height="15" fill="rgb(249,195,6)"/><text x="9.2217%" y="783.50">__libc_start_main</text></g><g><title>main (13,372 samples, 90.89%)</title><rect x="8.9785%" y="757" width="90.8856%" height="15" fill="rgb(237,174,47)"/><text x="9.2285%" y="767.50">main</text></g><g><title>std::rt::lang_start::{{closure}} (13,370 samples, 90.87%)</title><rect x="8.9920%" y="741" width="90.8720%" height="15" fill="rgb(206,201,31)"/><text x="9.2420%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>advent_of_code::main (13,370 samples, 90.87%)</title><rect x="8.9920%" y="725" width="90.8720%" height="15" fill="rgb(231,57,52)"/><text x="9.2420%" y="735.50">advent_of_code::main</text></g><g><title>_start (13,399 samples, 91.07%)</title><rect x="8.8969%" y="789" width="91.0691%" height="15" fill="rgb(248,177,22)"/><text x="9.1469%" y="799.50">_start</text></g><g><title>_dl_start (15 samples, 0.10%)</title><rect x="99.8641%" y="773" width="0.1020%" height="15" fill="rgb(215,211,37)"/><text x="100.1141%" y="783.50"></text></g><g><title>all (14,713 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(241,128,51)"/><text x="0.2500%" y="831.50"></text></g><g><title>advent-of-code (14,713 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(227,165,31)"/><text x="0.2500%" y="815.50">advent-of-code</text></g></svg></svg>