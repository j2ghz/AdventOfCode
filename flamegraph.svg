<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (15 samples, 0.13%)</title><rect x="0.0255%" y="757" width="0.1275%" height="15" fill="rgb(227,0,7)"/><text x="0.2755%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (210 samples, 1.78%)</title><rect x="0.2805%" y="741" width="1.7850%" height="15" fill="rgb(217,0,24)"/><text x="0.5305%" y="751.50">&lt;..</text></g><g><title>advent_of_code::day15::play_until (72 samples, 0.61%)</title><rect x="2.3204%" y="741" width="0.6120%" height="15" fill="rgb(221,193,54)"/><text x="2.5704%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (29 samples, 0.25%)</title><rect x="4.2244%" y="725" width="0.2465%" height="15" fill="rgb(248,212,6)"/><text x="4.4744%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.25%)</title><rect x="4.2244%" y="709" width="0.2465%" height="15" fill="rgb(208,68,35)"/><text x="4.4744%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (29 samples, 0.25%)</title><rect x="4.2244%" y="693" width="0.2465%" height="15" fill="rgb(232,128,0)"/><text x="4.4744%" y="703.50"></text></g><g><title>core::hash::Hasher::write_u32 (29 samples, 0.25%)</title><rect x="4.2244%" y="677" width="0.2465%" height="15" fill="rgb(207,160,47)"/><text x="4.4744%" y="687.50"></text></g><g><title>[unknown] (584 samples, 4.96%)</title><rect x="0.2295%" y="757" width="4.9639%" height="15" fill="rgb(228,23,34)"/><text x="0.4795%" y="767.50">[unkno..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (264 samples, 2.24%)</title><rect x="2.9494%" y="741" width="2.2439%" height="15" fill="rgb(218,30,26)"/><text x="3.1994%" y="751.50">s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (85 samples, 0.72%)</title><rect x="4.4709%" y="725" width="0.7225%" height="15" fill="rgb(220,122,19)"/><text x="4.7209%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.21%)</title><rect x="5.8564%" y="37" width="0.2125%" height="15" fill="rgb(250,228,42)"/><text x="6.1064%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.65%)</title><rect x="5.7289%" y="149" width="0.6460%" height="15" fill="rgb(240,193,28)"/><text x="5.9789%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (76 samples, 0.65%)</title><rect x="5.7289%" y="133" width="0.6460%" height="15" fill="rgb(216,20,37)"/><text x="5.9789%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (75 samples, 0.64%)</title><rect x="5.7374%" y="117" width="0.6375%" height="15" fill="rgb(206,188,39)"/><text x="5.9874%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (75 samples, 0.64%)</title><rect x="5.7374%" y="101" width="0.6375%" height="15" fill="rgb(217,207,13)"/><text x="5.9874%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (75 samples, 0.64%)</title><rect x="5.7374%" y="85" width="0.6375%" height="15" fill="rgb(231,73,38)"/><text x="5.9874%" y="95.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (67 samples, 0.57%)</title><rect x="5.8054%" y="69" width="0.5695%" height="15" fill="rgb(225,20,46)"/><text x="6.0554%" y="79.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_cardinal_seats::{{closure}} (62 samples, 0.53%)</title><rect x="5.8479%" y="53" width="0.5270%" height="15" fill="rgb(210,31,41)"/><text x="6.0979%" y="63.50"></text></g><g><title>advent_of_code::day11::Area::get_seat_in_direction (36 samples, 0.31%)</title><rect x="6.0688%" y="37" width="0.3060%" height="15" fill="rgb(221,200,47)"/><text x="6.3188%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (13 samples, 0.11%)</title><rect x="6.3748%" y="149" width="0.1105%" height="15" fill="rgb(226,26,5)"/><text x="6.6248%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.11%)</title><rect x="6.3748%" y="133" width="0.1105%" height="15" fill="rgb(249,33,26)"/><text x="6.6248%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (13 samples, 0.11%)</title><rect x="6.3748%" y="117" width="0.1105%" height="15" fill="rgb(235,183,28)"/><text x="6.6248%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.11%)</title><rect x="6.3748%" y="101" width="0.1105%" height="15" fill="rgb(221,5,38)"/><text x="6.6248%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (107 samples, 0.91%)</title><rect x="5.5844%" y="181" width="0.9095%" height="15" fill="rgb(247,18,42)"/><text x="5.8344%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (99 samples, 0.84%)</title><rect x="5.6524%" y="165" width="0.8415%" height="15" fill="rgb(241,131,45)"/><text x="5.9024%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.10%)</title><rect x="6.4938%" y="181" width="0.1020%" height="15" fill="rgb(249,31,29)"/><text x="6.7438%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (12 samples, 0.10%)</title><rect x="6.4938%" y="165" width="0.1020%" height="15" fill="rgb(225,111,53)"/><text x="6.7438%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.10%)</title><rect x="6.4938%" y="149" width="0.1020%" height="15" fill="rgb(238,160,17)"/><text x="6.7438%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.10%)</title><rect x="6.4938%" y="133" width="0.1020%" height="15" fill="rgb(214,148,48)"/><text x="6.7438%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12 samples, 0.10%)</title><rect x="6.4938%" y="117" width="0.1020%" height="15" fill="rgb(232,36,49)"/><text x="6.7438%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (125 samples, 1.06%)</title><rect x="5.5674%" y="293" width="1.0625%" height="15" fill="rgb(209,103,24)"/><text x="5.8174%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (125 samples, 1.06%)</title><rect x="5.5674%" y="277" width="1.0625%" height="15" fill="rgb(229,88,8)"/><text x="5.8174%" y="287.50"></text></g><g><title>core::iter::adapters::process_results (125 samples, 1.06%)</title><rect x="5.5674%" y="261" width="1.0625%" height="15" fill="rgb(213,181,19)"/><text x="5.8174%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (125 samples, 1.06%)</title><rect x="5.5674%" y="245" width="1.0625%" height="15" fill="rgb(254,191,54)"/><text x="5.8174%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (125 samples, 1.06%)</title><rect x="5.5674%" y="229" width="1.0625%" height="15" fill="rgb(241,83,37)"/><text x="5.8174%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (125 samples, 1.06%)</title><rect x="5.5674%" y="213" width="1.0625%" height="15" fill="rgb(233,36,39)"/><text x="5.8174%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (124 samples, 1.05%)</title><rect x="5.5759%" y="197" width="1.0540%" height="15" fill="rgb(226,3,54)"/><text x="5.8259%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.10%)</title><rect x="6.8763%" y="197" width="0.1020%" height="15" fill="rgb(245,192,40)"/><text x="7.1263%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.10%)</title><rect x="6.8763%" y="181" width="0.1020%" height="15" fill="rgb(238,167,29)"/><text x="7.1263%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.10%)</title><rect x="6.8763%" y="165" width="0.1020%" height="15" fill="rgb(232,182,51)"/><text x="7.1263%" y="175.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.10%)</title><rect x="6.8763%" y="149" width="0.1020%" height="15" fill="rgb(231,60,39)"/><text x="7.1263%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.10%)</title><rect x="6.8763%" y="133" width="0.1020%" height="15" fill="rgb(208,69,12)"/><text x="7.1263%" y="143.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.10%)</title><rect x="6.8763%" y="117" width="0.1020%" height="15" fill="rgb(235,93,37)"/><text x="7.1263%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.10%)</title><rect x="6.8763%" y="101" width="0.1020%" height="15" fill="rgb(213,116,39)"/><text x="7.1263%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.10%)</title><rect x="6.8763%" y="85" width="0.1020%" height="15" fill="rgb(222,207,29)"/><text x="7.1263%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41 samples, 0.35%)</title><rect x="6.6383%" y="229" width="0.3485%" height="15" fill="rgb(206,96,30)"/><text x="6.8883%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (32 samples, 0.27%)</title><rect x="6.7148%" y="213" width="0.2720%" height="15" fill="rgb(218,138,4)"/><text x="6.9648%" y="223.50"></text></g><g><title>&lt;advent_of_code::day11::day11_part2::RunnerStruct as aoc_runner::Runner&gt;::try_run (212 samples, 1.80%)</title><rect x="5.3634%" y="677" width="1.8020%" height="15" fill="rgb(250,191,14)"/><text x="5.6134%" y="687.50">&lt;..</text></g><g><title>advent_of_code::day11::part2 (212 samples, 1.80%)</title><rect x="5.3634%" y="661" width="1.8020%" height="15" fill="rgb(239,60,40)"/><text x="5.6134%" y="671.50">a..</text></g><g><title>advent_of_code::day11::Area::step2 (210 samples, 1.78%)</title><rect x="5.3804%" y="645" width="1.7850%" height="15" fill="rgb(206,27,48)"/><text x="5.6304%" y="655.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (210 samples, 1.78%)</title><rect x="5.3804%" y="629" width="1.7850%" height="15" fill="rgb(225,35,8)"/><text x="5.6304%" y="639.50">c..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (210 samples, 1.78%)</title><rect x="5.3804%" y="613" width="1.7850%" height="15" fill="rgb(250,213,24)"/><text x="5.6304%" y="623.50">&lt;..</text></g><g><title>core::iter::adapters::process_results (210 samples, 1.78%)</title><rect x="5.3804%" y="597" width="1.7850%" height="15" fill="rgb(247,123,22)"/><text x="5.6304%" y="607.50">c..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (210 samples, 1.78%)</title><rect x="5.3804%" y="581" width="1.7850%" height="15" fill="rgb(231,138,38)"/><text x="5.6304%" y="591.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (210 samples, 1.78%)</title><rect x="5.3804%" y="565" width="1.7850%" height="15" fill="rgb(231,145,46)"/><text x="5.6304%" y="575.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (210 samples, 1.78%)</title><rect x="5.3804%" y="549" width="1.7850%" height="15" fill="rgb(251,118,11)"/><text x="5.6304%" y="559.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (210 samples, 1.78%)</title><rect x="5.3804%" y="533" width="1.7850%" height="15" fill="rgb(217,147,25)"/><text x="5.6304%" y="543.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (210 samples, 1.78%)</title><rect x="5.3804%" y="517" width="1.7850%" height="15" fill="rgb(247,81,37)"/><text x="5.6304%" y="527.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (209 samples, 1.78%)</title><rect x="5.3889%" y="501" width="1.7765%" height="15" fill="rgb(209,12,38)"/><text x="5.6389%" y="511.50">a..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (209 samples, 1.78%)</title><rect x="5.3889%" y="485" width="1.7765%" height="15" fill="rgb(227,1,9)"/><text x="5.6389%" y="495.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (209 samples, 1.78%)</title><rect x="5.3889%" y="469" width="1.7765%" height="15" fill="rgb(248,47,43)"/><text x="5.6389%" y="479.50">c..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (209 samples, 1.78%)</title><rect x="5.3889%" y="453" width="1.7765%" height="15" fill="rgb(221,10,30)"/><text x="5.6389%" y="463.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (209 samples, 1.78%)</title><rect x="5.3889%" y="437" width="1.7765%" height="15" fill="rgb(210,229,1)"/><text x="5.6389%" y="447.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (209 samples, 1.78%)</title><rect x="5.3889%" y="421" width="1.7765%" height="15" fill="rgb(222,148,37)"/><text x="5.6389%" y="431.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (209 samples, 1.78%)</title><rect x="5.3889%" y="405" width="1.7765%" height="15" fill="rgb(234,67,33)"/><text x="5.6389%" y="415.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (209 samples, 1.78%)</title><rect x="5.3889%" y="389" width="1.7765%" height="15" fill="rgb(247,98,35)"/><text x="5.6389%" y="399.50">c..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (209 samples, 1.78%)</title><rect x="5.3889%" y="373" width="1.7765%" height="15" fill="rgb(247,138,52)"/><text x="5.6389%" y="383.50">&lt;..</text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (208 samples, 1.77%)</title><rect x="5.3974%" y="357" width="1.7680%" height="15" fill="rgb(213,79,30)"/><text x="5.6474%" y="367.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (207 samples, 1.76%)</title><rect x="5.4059%" y="341" width="1.7595%" height="15" fill="rgb(246,177,23)"/><text x="5.6559%" y="351.50"></text></g><g><title>advent_of_code::day11::Area::step2::{{closure}} (202 samples, 1.72%)</title><rect x="5.4484%" y="325" width="1.7170%" height="15" fill="rgb(230,62,27)"/><text x="5.6984%" y="335.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_cardinal_seats (197 samples, 1.67%)</title><rect x="5.4909%" y="309" width="1.6745%" height="15" fill="rgb(216,154,8)"/><text x="5.7409%" y="319.50"></text></g><g><title>itertools::Itertools::collect_vec (63 samples, 0.54%)</title><rect x="6.6298%" y="293" width="0.5355%" height="15" fill="rgb(244,35,45)"/><text x="6.8798%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (63 samples, 0.54%)</title><rect x="6.6298%" y="277" width="0.5355%" height="15" fill="rgb(251,115,12)"/><text x="6.8798%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (63 samples, 0.54%)</title><rect x="6.6298%" y="261" width="0.5355%" height="15" fill="rgb(240,54,50)"/><text x="6.8798%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (63 samples, 0.54%)</title><rect x="6.6298%" y="245" width="0.5355%" height="15" fill="rgb(233,84,52)"/><text x="6.8798%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (20 samples, 0.17%)</title><rect x="7.3608%" y="373" width="0.1700%" height="15" fill="rgb(207,117,47)"/><text x="7.6108%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (20 samples, 0.17%)</title><rect x="7.3608%" y="357" width="0.1700%" height="15" fill="rgb(249,43,39)"/><text x="7.6108%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (20 samples, 0.17%)</title><rect x="7.3608%" y="341" width="0.1700%" height="15" fill="rgb(209,38,44)"/><text x="7.6108%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.17%)</title><rect x="7.3608%" y="325" width="0.1700%" height="15" fill="rgb(236,212,23)"/><text x="7.6108%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.14%)</title><rect x="7.3863%" y="309" width="0.1445%" height="15" fill="rgb(242,79,21)"/><text x="7.6363%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (32 samples, 0.27%)</title><rect x="7.7943%" y="261" width="0.2720%" height="15" fill="rgb(211,96,35)"/><text x="8.0443%" y="271.50"></text></g><g><title>alloc::alloc::realloc (32 samples, 0.27%)</title><rect x="7.7943%" y="245" width="0.2720%" height="15" fill="rgb(253,215,40)"/><text x="8.0443%" y="255.50"></text></g><g><title>__rdl_realloc (32 samples, 0.27%)</title><rect x="7.7943%" y="229" width="0.2720%" height="15" fill="rgb(211,81,21)"/><text x="8.0443%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (32 samples, 0.27%)</title><rect x="7.7943%" y="213" width="0.2720%" height="15" fill="rgb(208,190,38)"/><text x="8.0443%" y="223.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.27%)</title><rect x="7.7943%" y="197" width="0.2720%" height="15" fill="rgb(235,213,38)"/><text x="8.0443%" y="207.50"></text></g><g><title>_int_realloc (22 samples, 0.19%)</title><rect x="7.8793%" y="181" width="0.1870%" height="15" fill="rgb(237,122,38)"/><text x="8.1293%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.31%)</title><rect x="7.7858%" y="277" width="0.3060%" height="15" fill="rgb(244,218,35)"/><text x="8.0358%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (45 samples, 0.38%)</title><rect x="7.7348%" y="341" width="0.3825%" height="15" fill="rgb(240,68,47)"/><text x="7.9848%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (45 samples, 0.38%)</title><rect x="7.7348%" y="325" width="0.3825%" height="15" fill="rgb(210,16,53)"/><text x="7.9848%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (45 samples, 0.38%)</title><rect x="7.7348%" y="309" width="0.3825%" height="15" fill="rgb(235,124,12)"/><text x="7.9848%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 0.38%)</title><rect x="7.7348%" y="293" width="0.3825%" height="15" fill="rgb(224,169,11)"/><text x="7.9848%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (55 samples, 0.47%)</title><rect x="7.7093%" y="357" width="0.4675%" height="15" fill="rgb(250,166,2)"/><text x="7.9593%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (18 samples, 0.15%)</title><rect x="8.1853%" y="357" width="0.1530%" height="15" fill="rgb(242,216,29)"/><text x="8.4353%" y="367.50"></text></g><g><title>advent_of_code::day11::Area::get_neighbors (97 samples, 0.82%)</title><rect x="7.5308%" y="373" width="0.8245%" height="15" fill="rgb(230,116,27)"/><text x="7.7808%" y="383.50"></text></g><g><title>advent_of_code::day11::Area::step::{{closure}} (121 samples, 1.03%)</title><rect x="7.3523%" y="405" width="1.0285%" height="15" fill="rgb(228,99,48)"/><text x="7.6023%" y="415.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_neighbors (120 samples, 1.02%)</title><rect x="7.3608%" y="389" width="1.0200%" height="15" fill="rgb(253,11,6)"/><text x="7.6108%" y="399.50"></text></g><g><title>&lt;advent_of_code::day11::day11_part1::RunnerStruct as aoc_runner::Runner&gt;::run (136 samples, 1.16%)</title><rect x="7.2333%" y="661" width="1.1560%" height="15" fill="rgb(247,143,39)"/><text x="7.4833%" y="671.50"></text></g><g><title>advent_of_code::day11::part1 (136 samples, 1.16%)</title><rect x="7.2333%" y="645" width="1.1560%" height="15" fill="rgb(236,97,10)"/><text x="7.4833%" y="655.50"></text></g><g><title>advent_of_code::day11::Area::step (136 samples, 1.16%)</title><rect x="7.2333%" y="629" width="1.1560%" height="15" fill="rgb(233,208,19)"/><text x="7.4833%" y="639.50"></text></g><g><title>itertools::Itertools::collect_vec (136 samples, 1.16%)</title><rect x="7.2333%" y="613" width="1.1560%" height="15" fill="rgb(216,164,2)"/><text x="7.4833%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (136 samples, 1.16%)</title><rect x="7.2333%" y="597" width="1.1560%" height="15" fill="rgb(220,129,5)"/><text x="7.4833%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (136 samples, 1.16%)</title><rect x="7.2333%" y="581" width="1.1560%" height="15" fill="rgb(242,17,10)"/><text x="7.4833%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (136 samples, 1.16%)</title><rect x="7.2333%" y="565" width="1.1560%" height="15" fill="rgb(242,107,0)"/><text x="7.4833%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (136 samples, 1.16%)</title><rect x="7.2333%" y="549" width="1.1560%" height="15" fill="rgb(251,28,31)"/><text x="7.4833%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (136 samples, 1.16%)</title><rect x="7.2333%" y="533" width="1.1560%" height="15" fill="rgb(233,223,10)"/><text x="7.4833%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (136 samples, 1.16%)</title><rect x="7.2333%" y="517" width="1.1560%" height="15" fill="rgb(215,21,27)"/><text x="7.4833%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (136 samples, 1.16%)</title><rect x="7.2333%" y="501" width="1.1560%" height="15" fill="rgb(232,23,21)"/><text x="7.4833%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (136 samples, 1.16%)</title><rect x="7.2333%" y="485" width="1.1560%" height="15" fill="rgb(244,5,23)"/><text x="7.4833%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (136 samples, 1.16%)</title><rect x="7.2333%" y="469" width="1.1560%" height="15" fill="rgb(226,81,46)"/><text x="7.4833%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (136 samples, 1.16%)</title><rect x="7.2333%" y="453" width="1.1560%" height="15" fill="rgb(247,70,30)"/><text x="7.4833%" y="463.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (136 samples, 1.16%)</title><rect x="7.2333%" y="437" width="1.1560%" height="15" fill="rgb(212,68,19)"/><text x="7.4833%" y="447.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (133 samples, 1.13%)</title><rect x="7.2588%" y="421" width="1.1305%" height="15" fill="rgb(240,187,13)"/><text x="7.5088%" y="431.50"></text></g><g><title>advent_of_code::day15::play_until (54 samples, 0.46%)</title><rect x="10.4377%" y="565" width="0.4590%" height="15" fill="rgb(223,113,26)"/><text x="10.6877%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (75 samples, 0.64%)</title><rect x="11.9167%" y="485" width="0.6375%" height="15" fill="rgb(206,192,2)"/><text x="12.1667%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (155 samples, 1.32%)</title><rect x="11.5342%" y="501" width="1.3175%" height="15" fill="rgb(241,108,4)"/><text x="11.7842%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.30%)</title><rect x="12.5542%" y="485" width="0.2975%" height="15" fill="rgb(247,173,49)"/><text x="12.8042%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (168 samples, 1.43%)</title><rect x="13.6932%" y="485" width="1.4280%" height="15" fill="rgb(224,114,35)"/><text x="13.9432%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (596 samples, 5.07%)</title><rect x="10.8967%" y="549" width="5.0659%" height="15" fill="rgb(245,159,27)"/><text x="11.1467%" y="559.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (596 samples, 5.07%)</title><rect x="10.8967%" y="533" width="5.0659%" height="15" fill="rgb(245,172,44)"/><text x="11.1467%" y="543.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (596 samples, 5.07%)</title><rect x="10.8967%" y="517" width="5.0659%" height="15" fill="rgb(236,23,11)"/><text x="11.1467%" y="527.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (366 samples, 3.11%)</title><rect x="12.8517%" y="501" width="3.1109%" height="15" fill="rgb(205,117,38)"/><text x="13.1017%" y="511.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (99 samples, 0.84%)</title><rect x="15.1211%" y="485" width="0.8415%" height="15" fill="rgb(237,72,25)"/><text x="15.3711%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (78 samples, 0.66%)</title><rect x="15.9626%" y="549" width="0.6630%" height="15" fill="rgb(244,70,9)"/><text x="16.2126%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (59 samples, 0.50%)</title><rect x="18.2575%" y="469" width="0.5015%" height="15" fill="rgb(217,125,39)"/><text x="18.5075%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (69 samples, 0.59%)</title><rect x="19.4985%" y="453" width="0.5865%" height="15" fill="rgb(235,36,10)"/><text x="19.7485%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (322 samples, 2.74%)</title><rect x="17.3991%" y="485" width="2.7369%" height="15" fill="rgb(251,123,47)"/><text x="17.6491%" y="495.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (162 samples, 1.38%)</title><rect x="18.7590%" y="469" width="1.3770%" height="15" fill="rgb(221,13,13)"/><text x="19.0090%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (1,088 samples, 9.25%)</title><rect x="10.8967%" y="565" width="9.2478%" height="15" fill="rgb(238,131,9)"/><text x="11.1467%" y="575.50">hashbrown::ma..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (414 samples, 3.52%)</title><rect x="16.6256%" y="549" width="3.5189%" height="15" fill="rgb(211,50,8)"/><text x="16.8756%" y="559.50">cor..</text></g><g><title>core::hash::Hasher::write_u32 (414 samples, 3.52%)</title><rect x="16.6256%" y="533" width="3.5189%" height="15" fill="rgb(245,182,24)"/><text x="16.8756%" y="543.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (323 samples, 2.75%)</title><rect x="17.3991%" y="517" width="2.7454%" height="15" fill="rgb(242,14,37)"/><text x="17.6491%" y="527.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (323 samples, 2.75%)</title><rect x="17.3991%" y="501" width="2.7454%" height="15" fill="rgb(246,228,12)"/><text x="17.6491%" y="511.50">&lt;c..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.23%)</title><rect x="20.5525%" y="549" width="0.2295%" height="15" fill="rgb(213,55,15)"/><text x="20.8025%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (84 samples, 0.71%)</title><rect x="20.7820%" y="533" width="0.7140%" height="15" fill="rgb(209,9,3)"/><text x="21.0320%" y="543.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (66 samples, 0.56%)</title><rect x="20.9350%" y="517" width="0.5610%" height="15" fill="rgb(230,59,30)"/><text x="21.1850%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.73%)</title><rect x="20.7820%" y="549" width="0.7310%" height="15" fill="rgb(209,121,21)"/><text x="21.0320%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (3,210 samples, 27.28%)</title><rect x="21.5895%" y="549" width="27.2843%" height="15" fill="rgb(220,109,13)"/><text x="21.8395%" y="559.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_valu..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3,210 samples, 27.28%)</title><rect x="21.5895%" y="533" width="27.2843%" height="15" fill="rgb(232,18,1)"/><text x="21.8395%" y="543.50">core::cmp::impls::&lt;impl core::cmp::PartialEq..</text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (23 samples, 0.20%)</title><rect x="48.8908%" y="549" width="0.1955%" height="15" fill="rgb(215,41,42)"/><text x="49.1408%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2,059 samples, 17.50%)</title><rect x="49.0863%" y="549" width="17.5011%" height="15" fill="rgb(224,123,36)"/><text x="49.3363%" y="559.50">hashbrown::raw::sse2::Group..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2,059 samples, 17.50%)</title><rect x="49.0863%" y="533" width="17.5011%" height="15" fill="rgb(240,125,3)"/><text x="49.3363%" y="543.50">core::core_arch::x86::sse2:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,059 samples, 17.50%)</title><rect x="49.0863%" y="517" width="17.5011%" height="15" fill="rgb(205,98,50)"/><text x="49.3363%" y="527.50">core::intrinsics::copy_nono..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (85 samples, 0.72%)</title><rect x="66.5873%" y="533" width="0.7225%" height="15" fill="rgb(205,185,37)"/><text x="66.8373%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (113 samples, 0.96%)</title><rect x="66.5873%" y="549" width="0.9605%" height="15" fill="rgb(238,207,15)"/><text x="66.8373%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (28 samples, 0.24%)</title><rect x="67.3098%" y="533" width="0.2380%" height="15" fill="rgb(213,199,42)"/><text x="67.5598%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (28 samples, 0.24%)</title><rect x="67.3098%" y="517" width="0.2380%" height="15" fill="rgb(235,201,11)"/><text x="67.5598%" y="527.50"></text></g><g><title>advent_of_code::day15::play_until (28 samples, 0.24%)</title><rect x="67.3098%" y="501" width="0.2380%" height="15" fill="rgb(207,46,11)"/><text x="67.5598%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,861 samples, 58.32%)</title><rect x="10.0042%" y="613" width="58.3170%" height="15" fill="rgb(241,35,35)"/><text x="10.2542%" y="623.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (6,861 samples, 58.32%)</title><rect x="10.0042%" y="597" width="58.3170%" height="15" fill="rgb(243,32,47)"/><text x="10.2542%" y="607.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (6,861 samples, 58.32%)</title><rect x="10.0042%" y="581" width="58.3170%" height="15" fill="rgb(247,202,23)"/><text x="10.2542%" y="591.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (5,668 samples, 48.18%)</title><rect x="20.1445%" y="565" width="48.1768%" height="15" fill="rgb(219,102,11)"/><text x="20.3945%" y="575.50">hashbrown::raw::RawTable&lt;T&gt;::find</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (91 samples, 0.77%)</title><rect x="67.5478%" y="549" width="0.7735%" height="15" fill="rgb(243,110,44)"/><text x="67.7978%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (91 samples, 0.77%)</title><rect x="67.5478%" y="533" width="0.7735%" height="15" fill="rgb(222,74,54)"/><text x="67.7978%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (91 samples, 0.77%)</title><rect x="67.5478%" y="517" width="0.7735%" height="15" fill="rgb(216,99,12)"/><text x="67.7978%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (135 samples, 1.15%)</title><rect x="72.5372%" y="501" width="1.1475%" height="15" fill="rgb(226,22,26)"/><text x="72.7872%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (98 samples, 0.83%)</title><rect x="73.6847%" y="501" width="0.8330%" height="15" fill="rgb(217,163,10)"/><text x="73.9347%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (442 samples, 3.76%)</title><rect x="71.3047%" y="517" width="3.7569%" height="15" fill="rgb(213,25,53)"/><text x="71.5547%" y="527.50">&lt;cor..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (64 samples, 0.54%)</title><rect x="74.5176%" y="501" width="0.5440%" height="15" fill="rgb(252,105,26)"/><text x="74.7676%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (173 samples, 1.47%)</title><rect x="76.1666%" y="501" width="1.4705%" height="15" fill="rgb(220,39,43)"/><text x="76.4166%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1,259 samples, 10.70%)</title><rect x="69.0098%" y="565" width="10.7012%" height="15" fill="rgb(229,68,48)"/><text x="69.2598%" y="575.50">&lt;std::collection..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,259 samples, 10.70%)</title><rect x="69.0098%" y="549" width="10.7012%" height="15" fill="rgb(252,8,32)"/><text x="69.2598%" y="559.50">&lt;core::hash::sip..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,259 samples, 10.70%)</title><rect x="69.0098%" y="533" width="10.7012%" height="15" fill="rgb(223,20,43)"/><text x="69.2598%" y="543.50">&lt;core::hash::sip..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (547 samples, 4.65%)</title><rect x="75.0616%" y="517" width="4.6494%" height="15" fill="rgb(229,81,49)"/><text x="75.3116%" y="527.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (244 samples, 2.07%)</title><rect x="77.6371%" y="501" width="2.0739%" height="15" fill="rgb(236,28,36)"/><text x="77.8871%" y="511.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (17 samples, 0.14%)</title><rect x="80.5950%" y="517" width="0.1445%" height="15" fill="rgb(249,185,26)"/><text x="80.8450%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (162 samples, 1.38%)</title><rect x="79.7110%" y="565" width="1.3770%" height="15" fill="rgb(249,174,33)"/><text x="79.9610%" y="575.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (58 samples, 0.49%)</title><rect x="80.5950%" y="549" width="0.4930%" height="15" fill="rgb(233,201,37)"/><text x="80.8450%" y="559.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (58 samples, 0.49%)</title><rect x="80.5950%" y="533" width="0.4930%" height="15" fill="rgb(221,78,26)"/><text x="80.8450%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (41 samples, 0.35%)</title><rect x="80.7395%" y="517" width="0.3485%" height="15" fill="rgb(250,127,30)"/><text x="80.9895%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (168 samples, 1.43%)</title><rect x="84.6069%" y="485" width="1.4280%" height="15" fill="rgb(230,49,44)"/><text x="84.8569%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (195 samples, 1.66%)</title><rect x="87.9133%" y="469" width="1.6575%" height="15" fill="rgb(229,67,23)"/><text x="88.1633%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (862 samples, 7.33%)</title><rect x="82.3289%" y="501" width="7.3268%" height="15" fill="rgb(249,83,47)"/><text x="82.5789%" y="511.50">&lt;core::has..</text></g><g><title>core::hash::sip::u8to64_le (426 samples, 3.62%)</title><rect x="86.0348%" y="485" width="3.6209%" height="15" fill="rgb(215,43,3)"/><text x="86.2848%" y="495.50">core..</text></g><g><title>hashbrown::map::make_hash (2,435 samples, 20.70%)</title><rect x="69.0098%" y="581" width="20.6970%" height="15" fill="rgb(238,154,13)"/><text x="69.2598%" y="591.50">hashbrown::map::make_hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1,014 samples, 8.62%)</title><rect x="81.0880%" y="565" width="8.6188%" height="15" fill="rgb(219,56,2)"/><text x="81.3380%" y="575.50">core::hash::..</text></g><g><title>core::hash::Hasher::write_u32 (1,014 samples, 8.62%)</title><rect x="81.0880%" y="549" width="8.6188%" height="15" fill="rgb(233,0,4)"/><text x="81.3380%" y="559.50">core::hash::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (868 samples, 7.38%)</title><rect x="82.3289%" y="533" width="7.3778%" height="15" fill="rgb(235,30,7)"/><text x="82.5789%" y="543.50">&lt;std::coll..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (868 samples, 7.38%)</title><rect x="82.3289%" y="517" width="7.3778%" height="15" fill="rgb(250,79,13)"/><text x="82.5789%" y="527.50">&lt;core::has..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.16%)</title><rect x="89.9873%" y="565" width="0.1615%" height="15" fill="rgb(211,146,34)"/><text x="90.2373%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (39 samples, 0.33%)</title><rect x="90.1487%" y="549" width="0.3315%" height="15" fill="rgb(228,22,38)"/><text x="90.3987%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (24 samples, 0.20%)</title><rect x="90.2762%" y="533" width="0.2040%" height="15" fill="rgb(235,168,5)"/><text x="90.5262%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.37%)</title><rect x="90.1487%" y="565" width="0.3655%" height="15" fill="rgb(221,155,16)"/><text x="90.3987%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (29 samples, 0.25%)</title><rect x="90.5142%" y="565" width="0.2465%" height="15" fill="rgb(215,215,53)"/><text x="90.7642%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (29 samples, 0.25%)</title><rect x="90.5142%" y="549" width="0.2465%" height="15" fill="rgb(223,4,10)"/><text x="90.7642%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (14 samples, 0.12%)</title><rect x="90.7607%" y="565" width="0.1190%" height="15" fill="rgb(234,103,6)"/><text x="91.0107%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (27 samples, 0.23%)</title><rect x="90.9477%" y="565" width="0.2295%" height="15" fill="rgb(227,97,0)"/><text x="91.1977%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (27 samples, 0.23%)</title><rect x="90.9477%" y="549" width="0.2295%" height="15" fill="rgb(234,150,53)"/><text x="91.1977%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.23%)</title><rect x="90.9477%" y="533" width="0.2295%" height="15" fill="rgb(228,201,54)"/><text x="91.1977%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (32 samples, 0.27%)</title><rect x="91.1772%" y="565" width="0.2720%" height="15" fill="rgb(222,22,37)"/><text x="91.4272%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (28 samples, 0.24%)</title><rect x="91.2112%" y="549" width="0.2380%" height="15" fill="rgb(237,53,32)"/><text x="91.4612%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (28 samples, 0.24%)</title><rect x="91.2112%" y="533" width="0.2380%" height="15" fill="rgb(233,25,53)"/><text x="91.4612%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (28 samples, 0.24%)</title><rect x="91.2112%" y="517" width="0.2380%" height="15" fill="rgb(210,40,34)"/><text x="91.4612%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (224 samples, 1.90%)</title><rect x="89.7068%" y="581" width="1.9040%" height="15" fill="rgb(241,220,44)"/><text x="89.9568%" y="591.50">h..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (19 samples, 0.16%)</title><rect x="91.4492%" y="565" width="0.1615%" height="15" fill="rgb(235,28,35)"/><text x="91.6992%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (36 samples, 0.31%)</title><rect x="91.8232%" y="565" width="0.3060%" height="15" fill="rgb(210,56,17)"/><text x="92.0732%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 0.12%)</title><rect x="92.3842%" y="437" width="0.1190%" height="15" fill="rgb(224,130,29)"/><text x="92.6342%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.10%)</title><rect x="92.5287%" y="421" width="0.1020%" height="15" fill="rgb(235,212,8)"/><text x="92.7787%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (48 samples, 0.41%)</title><rect x="92.2822%" y="453" width="0.4080%" height="15" fill="rgb(223,33,50)"/><text x="92.5322%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (22 samples, 0.19%)</title><rect x="92.5032%" y="437" width="0.1870%" height="15" fill="rgb(219,149,13)"/><text x="92.7532%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (55 samples, 0.47%)</title><rect x="92.2822%" y="485" width="0.4675%" height="15" fill="rgb(250,156,29)"/><text x="92.5322%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (55 samples, 0.47%)</title><rect x="92.2822%" y="469" width="0.4675%" height="15" fill="rgb(216,193,19)"/><text x="92.5322%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (15 samples, 0.13%)</title><rect x="92.7497%" y="485" width="0.1275%" height="15" fill="rgb(216,135,14)"/><text x="92.9997%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (126 samples, 1.07%)</title><rect x="92.2652%" y="517" width="1.0710%" height="15" fill="rgb(241,47,5)"/><text x="92.5152%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (124 samples, 1.05%)</title><rect x="92.2822%" y="501" width="1.0540%" height="15" fill="rgb(233,42,35)"/><text x="92.5322%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (54 samples, 0.46%)</title><rect x="92.8772%" y="485" width="0.4590%" height="15" fill="rgb(231,13,6)"/><text x="93.1272%" y="495.50"></text></g><g><title>core::hash::Hasher::write_u32 (54 samples, 0.46%)</title><rect x="92.8772%" y="469" width="0.4590%" height="15" fill="rgb(207,181,40)"/><text x="93.1272%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (38 samples, 0.32%)</title><rect x="93.0132%" y="453" width="0.3230%" height="15" fill="rgb(254,173,49)"/><text x="93.2632%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (38 samples, 0.32%)</title><rect x="93.0132%" y="437" width="0.3230%" height="15" fill="rgb(221,1,38)"/><text x="93.2632%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (38 samples, 0.32%)</title><rect x="93.0132%" y="421" width="0.3230%" height="15" fill="rgb(206,124,46)"/><text x="93.2632%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (19 samples, 0.16%)</title><rect x="93.1747%" y="405" width="0.1615%" height="15" fill="rgb(249,21,11)"/><text x="93.4247%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (96 samples, 0.82%)</title><rect x="93.3362%" y="517" width="0.8160%" height="15" fill="rgb(222,201,40)"/><text x="93.5862%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (96 samples, 0.82%)</title><rect x="93.3362%" y="501" width="0.8160%" height="15" fill="rgb(235,61,29)"/><text x="93.5862%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (96 samples, 0.82%)</title><rect x="93.3362%" y="485" width="0.8160%" height="15" fill="rgb(219,207,3)"/><text x="93.5862%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (12 samples, 0.10%)</title><rect x="94.1521%" y="517" width="0.1020%" height="15" fill="rgb(222,56,46)"/><text x="94.4021%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::set_ctrl (13 samples, 0.11%)</title><rect x="94.2966%" y="517" width="0.1105%" height="15" fill="rgb(239,76,54)"/><text x="94.5466%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (291 samples, 2.47%)</title><rect x="92.1292%" y="565" width="2.4734%" height="15" fill="rgb(231,124,27)"/><text x="92.3792%" y="575.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (290 samples, 2.46%)</title><rect x="92.1377%" y="549" width="2.4649%" height="15" fill="rgb(249,195,6)"/><text x="92.3877%" y="559.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (290 samples, 2.46%)</title><rect x="92.1377%" y="533" width="2.4649%" height="15" fill="rgb(237,174,47)"/><text x="92.3877%" y="543.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (23 samples, 0.20%)</title><rect x="94.4071%" y="517" width="0.1955%" height="15" fill="rgb(206,201,31)"/><text x="94.6571%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (23 samples, 0.20%)</title><rect x="94.4071%" y="501" width="0.1955%" height="15" fill="rgb(231,57,52)"/><text x="94.6571%" y="511.50"></text></g><g><title>core::intrinsics::write_bytes (23 samples, 0.20%)</title><rect x="94.4071%" y="485" width="0.1955%" height="15" fill="rgb(248,177,22)"/><text x="94.6571%" y="495.50"></text></g><g><title>__memset_erms (23 samples, 0.20%)</title><rect x="94.4071%" y="469" width="0.1955%" height="15" fill="rgb(215,211,37)"/><text x="94.6571%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (386 samples, 3.28%)</title><rect x="91.6107%" y="581" width="3.2809%" height="15" fill="rgb(241,128,51)"/><text x="91.8607%" y="591.50">has..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (19 samples, 0.16%)</title><rect x="94.7301%" y="565" width="0.1615%" height="15" fill="rgb(227,165,31)"/><text x="94.9801%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3,189 samples, 27.11%)</title><rect x="68.3213%" y="613" width="27.1058%" height="15" fill="rgb(228,167,24)"/><text x="68.5713%" y="623.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (3,183 samples, 27.05%)</title><rect x="68.3723%" y="597" width="27.0548%" height="15" fill="rgb(228,143,12)"/><text x="68.6223%" y="607.50">hashbrown::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (63 samples, 0.54%)</title><rect x="94.8916%" y="581" width="0.5355%" height="15" fill="rgb(249,149,8)"/><text x="95.1416%" y="591.50"></text></g><g><title>&lt;advent_of_code::day15::day15_part2_default::RunnerStruct as aoc_runner::Runner&gt;::run (10,262 samples, 87.22%)</title><rect x="8.3893%" y="661" width="87.2248%" height="15" fill="rgb(243,35,44)"/><text x="8.6393%" y="671.50">&lt;advent_of_code::day15::day15_part2_default::RunnerStruct as aoc_runner::Runner&gt;::run</text></g><g><title>advent_of_code::day15::part2 (10,262 samples, 87.22%)</title><rect x="8.3893%" y="645" width="87.2248%" height="15" fill="rgb(246,89,9)"/><text x="8.6393%" y="655.50">advent_of_code::day15::part2</text></g><g><title>advent_of_code::day15::play_until (10,262 samples, 87.22%)</title><rect x="8.3893%" y="629" width="87.2248%" height="15" fill="rgb(233,213,13)"/><text x="8.6393%" y="639.50">advent_of_code::day15::play_until</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (22 samples, 0.19%)</title><rect x="95.4271%" y="613" width="0.1870%" height="15" fill="rgb(233,141,41)"/><text x="95.6771%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (22 samples, 0.19%)</title><rect x="95.4271%" y="597" width="0.1870%" height="15" fill="rgb(239,167,4)"/><text x="95.6771%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (22 samples, 0.19%)</title><rect x="95.4271%" y="581" width="0.1870%" height="15" fill="rgb(209,217,16)"/><text x="95.6771%" y="591.50"></text></g><g><title>&lt;advent_of_code::day25::day25_part1::RunnerStruct as aoc_runner::Runner&gt;::run (12 samples, 0.10%)</title><rect x="95.6226%" y="629" width="0.1020%" height="15" fill="rgb(219,88,35)"/><text x="95.8726%" y="639.50"></text></g><g><title>advent_of_code::day25::transform (341 samples, 2.90%)</title><rect x="95.7246%" y="629" width="2.8984%" height="15" fill="rgb(220,193,23)"/><text x="95.9746%" y="639.50">ad..</text></g><g><title>aoc_runner::Runner::try_run (10,886 samples, 92.53%)</title><rect x="7.2333%" y="677" width="92.5287%" height="15" fill="rgb(230,90,52)"/><text x="7.4833%" y="687.50">aoc_runner::Runner::try_run</text></g><g><title>&lt;advent_of_code::day25::day25_part1::RunnerStruct as aoc_runner::Runner&gt;::run (487 samples, 4.14%)</title><rect x="95.6226%" y="661" width="4.1394%" height="15" fill="rgb(252,106,19)"/><text x="95.8726%" y="671.50">&lt;adve..</text></g><g><title>advent_of_code::day25::part1 (487 samples, 4.14%)</title><rect x="95.6226%" y="645" width="4.1394%" height="15" fill="rgb(206,74,20)"/><text x="95.8726%" y="655.50">adven..</text></g><g><title>advent_of_code::day25::transform_until (134 samples, 1.14%)</title><rect x="98.6230%" y="629" width="1.1390%" height="15" fill="rgb(230,138,44)"/><text x="98.8730%" y="639.50"></text></g><g><title>std::rt::lang_start::{{closure}} (11,107 samples, 94.41%)</title><rect x="5.3634%" y="709" width="94.4071%" height="15" fill="rgb(235,182,43)"/><text x="5.6134%" y="719.50">std::rt::lang_start::{{closure}}</text></g><g><title>advent_of_code::main (11,107 samples, 94.41%)</title><rect x="5.3634%" y="693" width="94.4071%" height="15" fill="rgb(242,16,51)"/><text x="5.6134%" y="703.50">advent_of_code::main</text></g><g><title>__libc_start_main (11,109 samples, 94.42%)</title><rect x="5.3549%" y="741" width="94.4241%" height="15" fill="rgb(248,9,4)"/><text x="5.6049%" y="751.50">__libc_start_main</text></g><g><title>main (11,108 samples, 94.42%)</title><rect x="5.3634%" y="725" width="94.4156%" height="15" fill="rgb(210,31,22)"/><text x="5.6134%" y="735.50">main</text></g><g><title>_start (11,146 samples, 94.74%)</title><rect x="5.2104%" y="757" width="94.7386%" height="15" fill="rgb(239,54,39)"/><text x="5.4604%" y="767.50">_start</text></g><g><title>_dl_start (20 samples, 0.17%)</title><rect x="99.7790%" y="741" width="0.1700%" height="15" fill="rgb(230,99,41)"/><text x="100.0290%" y="751.50"></text></g><g><title>_dl_sysdep_start (17 samples, 0.14%)</title><rect x="99.8045%" y="725" width="0.1445%" height="15" fill="rgb(253,106,12)"/><text x="100.0545%" y="735.50"></text></g><g><title>dl_main (16 samples, 0.14%)</title><rect x="99.8130%" y="709" width="0.1360%" height="15" fill="rgb(213,46,41)"/><text x="100.0630%" y="719.50"></text></g><g><title>all (11,765 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(215,133,35)"/><text x="0.2500%" y="799.50"></text></g><g><title>advent-of-code (11,765 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(213,28,5)"/><text x="0.2500%" y="783.50">advent-of-code</text></g></svg></svg>